// üìÑ /scripts/block-service.js
import { supabase } from './supabase.js'
import { BLOCK_QUERIES, REPORT_QUERIES } from './database.js'
import { showAlert } from './utils.helpers.js'

export const blockService = {
    // ‚úÖ BLOQUEAR USU√ÅRIO
    async blockUser(blockerId, blockedId, blockedName = 'Usu√°rio') {
        try {
            console.log('üö´ Bloqueando usu√°rio:', { blockerId, blockedId, blockedName })
            
            const { data, error } = await BLOCK_QUERIES.blockUser(blockerId, blockedId)
            
            if (error) {
                if (error.code === '23505') {
                    console.log('‚ÑπÔ∏è Usu√°rio j√° estava bloqueado')
                    return { 
                        success: true, 
                        message: `${blockedName} j√° estava bloqueado`,
                        alreadyBlocked: true 
                    }
                }
                throw error
            }
            
            console.log('‚úÖ Usu√°rio bloqueado com sucesso:', data)
            
            return { 
                success: true, 
                message: `${blockedName} bloqueado com sucesso!`,
                blockId: data.id 
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao bloquear usu√°rio:', error)
            return { 
                success: false, 
                error: 'Erro ao bloquear usu√°rio. Tente novamente.' 
            }
        }
    },

    // ‚úÖ DESBLOQUEAR USU√ÅRIO
    async unblockUser(blockerId, blockedId, blockedName = 'Usu√°rio') {
        try {
            console.log('üîì Desbloqueando usu√°rio:', { blockerId, blockedId, blockedName })
            
            const { data, error } = await supabase
                .from('user_blocks')
                .delete()
                .eq('blocker_id', blockerId)
                .eq('blocked_user_id', blockedId)
                .select()
                .single()

            if (error) {
                if (error.code === 'PGRST116') {
                    console.log('‚ÑπÔ∏è Usu√°rio n√£o estava bloqueado')
                    return { 
                        success: true, 
                        message: `${blockedName} n√£o estava bloqueado`,
                        alreadyUnblocked: true 
                    }
                }
                throw error
            }
            
            console.log('‚úÖ Usu√°rio desbloqueado com sucesso')
            
            return { 
                success: true, 
                message: `${blockedName} desbloqueado com sucesso!` 
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao desbloquear usu√°rio:', error)
            return { 
                success: false, 
                error: 'Erro ao desbloquear usu√°rio. Tente novamente.' 
            }
        }
    },

    // ‚úÖ CARREGAR USU√ÅRIOS BLOQUEADOS
    async loadBlockedUsers(userId) {
        try {
            console.log('üìã Carregando usu√°rios bloqueados para:', userId)
            
            const { data: blocks, error } = await BLOCK_QUERIES.getBlockedUsers(userId)
            
            if (error) {
                console.error('‚ùå Erro ao carregar usu√°rios bloqueados:', error)
                showAlert('Erro ao carregar usu√°rios bloqueados', 'error')
                return []
            }
            
            console.log(`‚úÖ ${blocks?.length || 0} usu√°rios bloqueados encontrados`)
            
            const blockedUsers = (blocks || []).map(block => ({
                id: block.blocked_user_id,
                nickname: block.profiles?.nickname || 'Usu√°rio',
                avatar_url: block.profiles?.avatar_url,
                city: block.profiles?.city || 'Cidade n√£o informada',
                blocked_at: block.created_at,
                time_ago: this.getTimeAgo(block.created_at)
            }))
            
            return blockedUsers
            
        } catch (error) {
            console.error('‚ùå Erro inesperado ao carregar bloqueados:', error)
            return []
        }
    },

    // ‚úÖ VERIFICAR SE USU√ÅRIO EST√Å BLOQUEADO
    async isUserBlocked(userId, targetUserId) {
        try {
            console.log('üîç Verificando se usu√°rio est√° bloqueado:', { userId, targetUserId })
            
            const { isBlocked, error } = await BLOCK_QUERIES.checkBlockStatus(userId, targetUserId)
            
            if (error) {
                console.error('‚ùå Erro ao verificar bloqueio:', error)
                return false
            }
            
            console.log(`‚úÖ Usu√°rio ${isBlocked ? 'EST√Å' : 'N√ÉO est√°'} bloqueado`)
            return isBlocked
            
        } catch (error) {
            console.error('‚ùå Erro inesperado ao verificar bloqueio:', error)
            return false
        }
    },

    // ‚úÖ REPORTAR USU√ÅRIO
    async reportUser(reporterId, reportedUserId, reportedName, reason, description = '') {
        try {
            console.log('üö® Reportando usu√°rio:', { 
                reporterId, 
                reportedUserId, 
                reportedName, 
                reason 
            })
            
            const { data, error } = await REPORT_QUERIES.reportUser(
                reporterId, 
                reportedUserId, 
                reason, 
                description
            )
            
            if (error) {
                console.error('‚ùå Erro ao reportar usu√°rio:', error)
                return { 
                    success: false, 
                    error: 'Erro ao reportar usu√°rio. Tente novamente.' 
                }
            }
            
            console.log('‚úÖ Usu√°rio reportado com sucesso:', data)
            
            return { 
                success: true, 
                message: `${reportedName} reportado com sucesso!`,
                reportId: data.id
            }
            
        } catch (error) {
            console.error('‚ùå Erro inesperado ao reportar usu√°rio:', error)
            return { 
                success: false, 
                error: 'Erro ao reportar usu√°rio. Tente novamente.' 
            }
        }
    },

    // ‚úÖ CRIAR CARD DE USU√ÅRIO BLOQUEADO
    createBlockedUserCard(blockedUser) {
        try {
            if (!blockedUser) return ''
            
            const { id, nickname, avatar_url, city, time_ago } = blockedUser
            
            const initial = nickname.charAt(0).toUpperCase()
            
            let avatarHtml = ''
            if (avatar_url) {
                avatarHtml = `
                    <div class="user-card-avatar" style="background-image: url('${avatar_url}'); background-size: cover; background-position: center;">
                        <div class="user-card-avatar-fallback" style="display: none;">${initial}</div>
                    </div>
                `
            } else {
                avatarHtml = `
                    <div class="user-card-avatar">
                        <div class="user-card-avatar-fallback">${initial}</div>
                    </div>
                `
            }

            return `
                <div class="user-card blocked-user-card" data-user-id="${id}">
                    ${avatarHtml}
                    <div class="user-card-name">${nickname}</div>
                    
                    <div class="user-card-info">
                        ${city ? `<div class="user-card-detail">üìç ${city}</div>` : ''}
                        <div class="user-card-detail">‚è∞ Bloqueado ${time_ago}</div>
                    </div>
                    
                    <div class="user-card-actions">
                        <button class="btn btn-secondary btn-sm" onclick="blockService.unblockUserFromCard('${id}', '${nickname}')">
                            üîì Desbloquear
                        </button>
                        <button class="btn btn-outline btn-sm" onclick="blockService.viewBlockedProfile('${id}')">
                            üëÄ Ver Perfil
                        </button>
                    </div>
                </div>
            `
            
        } catch (error) {
            console.error('‚ùå Erro ao criar card de usu√°rio bloqueado:', error)
            return ''
        }
    },

    // ‚úÖ DESBLOQUEAR USU√ÅRIO DIRETO DO CARD
    async unblockUserFromCard(userId, userName = 'Usu√°rio') {
        try {
            console.log('üîì Desbloqueando usu√°rio do card:', { userId, userName })
            
            const currentUser = await this.getCurrentUser()
            if (!currentUser) return
            
            const result = await this.unblockUser(currentUser.id, userId, userName)
            
            if (result.success) {
                showAlert(result.message, 'success')
                // Remover card da UI
                this.removeBlockedUserCard(userId)
            } else {
                showAlert(result.error, 'error')
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao desbloquear do card:', error)
            showAlert('Erro ao desbloquear usu√°rio', 'error')
        }
    },

    // ‚úÖ REMOVER CARD DA UI AP√ìS DESBLOQUEIO
    removeBlockedUserCard(userId) {
        try {
            console.log('üóëÔ∏è Removendo card do usu√°rio bloqueado:', userId)
            
            const card = document.querySelector(`.blocked-user-card[data-user-id="${userId}"]`)
            if (card) {
                card.style.transition = 'all 0.3s ease'
                card.style.opacity = '0.5'
                card.style.transform = 'scale(0.95)'
                
                setTimeout(() => {
                    card.style.opacity = '0'
                    card.style.height = '0'
                    card.style.margin = '0'
                    card.style.padding = '0'
                    card.style.overflow = 'hidden'
                    card.style.border = 'none'
                    
                    setTimeout(() => {
                        if (card.parentNode) {
                            card.remove()
                            console.log('‚úÖ Card removido da UI')
                            
                            // Verificar se ficou vazio
                            const remainingCards = document.querySelectorAll('.blocked-user-card').length
                            if (remainingCards === 0) {
                                this.showEmptyBlockedState()
                            }
                        }
                    }, 300)
                }, 150)
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao remover card:', error)
        }
    },

    // ‚úÖ MOSTRAR ESTADO VAZIO PARA BLOQUEADOS
    showEmptyBlockedState() {
        const container = document.getElementById('blockedUsersGrid')
        if (container) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üö´</div>
                    <h3>Nenhum usu√°rio bloqueado</h3>
                    <p>Voc√™ n√£o bloqueou nenhum usu√°rio ainda</p>
                </div>
            `
        }
    },

    // ‚úÖ VER PERFIL DE USU√ÅRIO BLOQUEADO
    async viewBlockedProfile(userId) {
        try {
            console.log('üëÄ Visualizando perfil de usu√°rio bloqueado:', userId)
            
            // Verificar se ainda est√° bloqueado
            const currentUser = await this.getCurrentUser()
            if (!currentUser) return
            
            const isStillBlocked = await this.isUserBlocked(currentUser.id, userId)
            
            if (isStillBlocked) {
                showAlert('Voc√™ precisa desbloquear este usu√°rio para ver o perfil', 'warning')
                return
            }
            
            // Se n√£o est√° mais bloqueado, redirecionar
            localStorage.setItem('viewingProfileId', userId)
            window.location.href = 'perfil.html'
            
        } catch (error) {
            console.error('‚ùå Erro ao visualizar perfil bloqueado:', error)
            showAlert('Erro ao visualizar perfil', 'error')
        }
    },

    // ‚úÖ BUSCAR USU√ÅRIO ATUAL
    async getCurrentUser() {
        try {
            const { data: { user }, error } = await supabase.auth.getUser()
            if (error) throw error
            return user
        } catch (error) {
            console.error('‚ùå Erro ao buscar usu√°rio atual:', error)
            return null
        }
    },

    // ‚úÖ FORMATAR TEMPO RELATIVO (para blocked_at)
    getTimeAgo(dateString) {
        const date = new Date(dateString)
        const now = new Date()
        const diffMs = now - date
        const diffMins = Math.floor(diffMs / 60000)
        const diffHours = Math.floor(diffMs / 3600000)
        const diffDays = Math.floor(diffMs / 86400000)
        
        if (diffMins < 1) return 'agora'
        if (diffMins < 60) return `${diffMins}min atr√°s`
        if (diffHours < 24) return `${diffHours}h atr√°s`
        if (diffDays < 7) return `${diffDays}d atr√°s`
        return `${Math.floor(diffDays / 7)}sem atr√°s`
    },

    // ‚úÖ INICIALIZAR SISTEMA DE BLOQUEIO NA HOME
    async initializeBlockSystem(userId) {
        try {
            console.log('‚ö° Inicializando sistema de bloqueio...')
            
            // Carregar IDs bloqueados em cache para performance
            const blockedIds = await this.loadBlockedIdsForCache(userId)
            
            console.log(`‚úÖ Sistema de bloqueio inicializado: ${blockedIds.length} usu√°rios bloqueados`)
            return blockedIds
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar sistema de bloqueio:', error)
            return []
        }
    },

    // ‚úÖ CARREGAR IDs BLOQUEADOS PARA CACHE (performance)
    async loadBlockedIdsForCache(userId) {
        try {
            const { data: blocks, error } = await supabase
                .from('user_blocks')
                .select('blocked_user_id')
                .eq('blocker_id', userId)

            if (error) throw error
            
            return blocks.map(b => b.blocked_user_id)
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar IDs bloqueados:', error)
            return []
        }
    }
}

// ‚úÖ EXPORTA√á√ÉO PADR√ÉO
export default blockService