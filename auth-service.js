// üìÑ /scripts/auth-service.js
import { supabase } from './supabase.js'

export const authService = {
    // ‚úÖ VERIFICAR SE USU√ÅRIO EST√Å LOGADO
    async checkAuth() {
        try {
            const { data: { user }, error } = await supabase.auth.getUser()
            
            if (error) throw error
            if (!user) {
                window.location.href = 'login.html'
                return null
            }
            
            return user
        } catch (error) {
            console.error('‚ùå Erro na autentica√ß√£o:', error)
            window.location.href = 'login.html'
            return null
        }
    },

    // ‚úÖ FAZER LOGIN
    async login(email, password) {
        try {
            const { data, error } = await supabase.auth.signInWithPassword({
                email: email,
                password: password
            })

            if (error) throw error
            
            return { success: true, user: data.user }
        } catch (error) {
            console.error('‚ùå Erro no login:', error)
            return { success: false, error: error.message }
        }
    },

    // ‚úÖ FAZER LOGOUT
    async logout() {
        try {
            const { error } = await supabase.auth.signOut()
            if (error) throw error
            
            window.location.href = 'index.html'
        } catch (error) {
            console.error('‚ùå Erro no logout:', error)
        }
    },

    // ‚úÖ CADASTRAR USU√ÅRIO
    async signUp(email, password, userData) {
        try {
            const { data, error } = await supabase.auth.signUp({
                email: email,
                password: password,
                options: {
                    data: {
                        nickname: userData.nickname,
                        full_name: userData.fullName
                    }
                }
            })

            if (error) throw error
            
            return { success: true, user: data.user }
        } catch (error) {
            console.error('‚ùå Erro no cadastro:', error)
            return { success: false, error: error.message }
        }
    },

    // ‚úÖ VERIFICAR E-MAIL
    async verifyEmail(token) {
        try {
            const { data, error } = await supabase.auth.verifyOtp({
                token_hash: token,
                type: 'email'
            })

            if (error) throw error
            
            return { success: true, data }
        } catch (error) {
            console.error('‚ùå Erro na verifica√ß√£o de e-mail:', error)
            return { success: false, error: error.message }
        }
    },

    // ‚úÖ RECUPERAR SENHA
    async resetPassword(email) {
        try {
            const { data, error } = await supabase.auth.resetPasswordForEmail(email, {
                redirectTo: `${window.location.origin}/reset-password.html`,
            })

            if (error) throw error
            
            return { success: true, data }
        } catch (error) {
            console.error('‚ùå Erro ao enviar e-mail de recupera√ß√£o:', error)
            return { success: false, error: error.message }
        }
    },

    // ‚úÖ ALTERAR SENHA
    async updatePassword(newPassword) {
        try {
            const { data, error } = await supabase.auth.updateUser({
                password: newPassword
            })

            if (error) throw error
            
            return { success: true, data }
        } catch (error) {
            console.error('‚ùå Erro ao alterar senha:', error)
            return { success: false, error: error.message }
        }
    },

    // ‚úÖ REENVIAR E-MAIL DE VERIFICA√á√ÉO
    async resendVerification(email) {
        try {
            const { data, error } = await supabase.auth.resend({
                type: 'signup',
                email: email,
                options: {
                    emailRedirectTo: `${window.location.origin}/verificacao.html`
                }
            })

            if (error) throw error
            
            return { success: true, data }
        } catch (error) {
            console.error('‚ùå Erro ao reenviar verifica√ß√£o:', error)
            return { success: false, error: error.message }
        }
    },

    // ‚úÖ BUSCAR PERFIL DO USU√ÅRIO
    async getUserProfile(userId) {
        try {
            const { data, error } = await supabase
                .from('profiles')
                .select('*')
                .eq('id', userId)
                .single()

            if (error) throw error
            return data
        } catch (error) {
            console.error('‚ùå Erro ao buscar perfil:', error)
            return null
        }
    },

    // ‚úÖ ATUALIZAR PERFIL DO USU√ÅRIO
    async updateUserProfile(userId, profileData) {
        try {
            const { data, error } = await supabase
                .from('profiles')
                .update(profileData)
                .eq('id', userId)
                .select()
                .single()

            if (error) throw error
            return { success: true, data }
        } catch (error) {
            console.error('‚ùå Erro ao atualizar perfil:', error)
            return { success: false, error: error.message }
        }
    },

    // ‚úÖ ATUALIZAR STATUS ONLINE
    async updateOnlineStatus(userId) {
        try {
            const { error } = await supabase
                .from('profiles')
                .update({ 
                    last_online_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                })
                .eq('id', userId)

            if (error) throw error
            
            return { success: true }
        } catch (error) {
            console.error('‚ùå Erro ao atualizar status online:', error)
            return { success: false, error: error.message }
        }
    },

    // ‚úÖ VERIFICAR SESS√ÉO ATIVA
    async getSession() {
        try {
            const { data: { session }, error } = await supabase.auth.getSession()
            
            if (error) throw error
            return session
        } catch (error) {
            console.error('‚ùå Erro ao buscar sess√£o:', error)
            return null
        }
    },

    // ‚úÖ OBTER USU√ÅRIO ATUAL (sem redirecionar)
    async getCurrentUser() {
        try {
            const { data: { user }, error } = await supabase.auth.getUser()
            
            if (error) throw error
            return user
        } catch (error) {
            console.error('‚ùå Erro ao buscar usu√°rio atual:', error)
            return null
        }
    },

    // ‚úÖ ATUALIZAR DADOS DO USU√ÅRIO
    async updateUserData(userData) {
        try {
            const { data, error } = await supabase.auth.updateUser({
                data: userData
            })

            if (error) throw error
            return { success: true, data }
        } catch (error) {
            console.error('‚ùå Erro ao atualizar dados do usu√°rio:', error)
            return { success: false, error: error.message }
        }
    },

    // ‚úÖ VERIFICAR SE E-MAIL EST√Å DISPON√çVEL
    async checkEmailAvailable(email) {
        try {
            const { data, error } = await supabase
                .from('profiles')
                .select('email')
                .eq('email', email)
                .single()

            // Se n√£o encontrou, email est√° dispon√≠vel
            if (error && error.code === 'PGRST116') {
                return { available: true }
            }
            
            if (error) throw error
            
            return { available: false }
        } catch (error) {
            console.error('‚ùå Erro ao verificar e-mail:', error)
            return { available: false, error: error.message }
        }
    },

    // ‚úÖ OBTER METADADAS DO USU√ÅRIO
    getUserMetadata() {
        try {
            const user = supabase.auth.getUser()
            return user?.user_metadata || null
        } catch (error) {
            console.error('‚ùå Erro ao obter metadados:', error)
            return null
        }
    },

    // ‚úÖ VERIFICAR SE √â PRIMEIRO LOGIN
    async isFirstLogin(userId) {
        try {
            const { data, error } = await supabase
                .from('profiles')
                .select('created_at, last_login_at')
                .eq('id', userId)
                .single()

            if (error) throw error
            
            // Se last_login_at √© null, √© primeiro login
            return !data.last_login_at
        } catch (error) {
            console.error('‚ùå Erro ao verificar primeiro login:', error)
            return false
        }
    },

    // ‚úÖ REGISTRAR LOGIN (atualizar last_login_at)
    async registerLogin(userId) {
        try {
            const { error } = await supabase
                .from('profiles')
                .update({ 
                    last_login_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                })
                .eq('id', userId)

            if (error) throw error
            
            return { success: true }
        } catch (error) {
            console.error('‚ùå Erro ao registrar login:', error)
            return { success: false, error: error.message }
        }
    }
}

// ‚úÖ EXPORTA√á√ÉO PADR√ÉO
export default authService